name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Generate debug keystore
      run: |
        mkdir -p ~/.android
        echo "y" | keytool -genkey -v \
          -keystore ~/.android/debug.keystore \
          -storepass android \
          -alias androiddebugkey \
          -keypass android \
          -keyalg RSA \
          -keysize 2048 \
          -validity 10000 \
          -dname "CN=Android Debug,O=Android,C=US" || echo "Keystore already exists or generated"
      
    - name: Clean project
      run: ./gradlew clean
      
    - name: Run lint
      run: ./gradlew lint
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Build release APK
      run: ./gradlew assembleRelease
      
    - name: Upload debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/*.apk
        retention-days: 30
        
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/*.apk
        retention-days: 30
        
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results*.html
        retention-days: 30

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run instrumented tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        script: ./gradlew connectedAndroidTest
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/build/reports/androidTests/
        retention-days: 30

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download debug APK artifact
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: ./debug-apk/
        
    - name: Download release APK artifact
      uses: actions/download-artifact@v4
      with:
        name: release-apk
        path: ./release-apk/
        continue-on-error: true
        
    - name: Validate APK
      run: |
        echo "Validating APK files..."
        
        echo "=== DEBUG APK ==="
        for apk in ./debug-apk/*.apk; do
          if [ -f "$apk" ]; then
            echo "Found debug APK: $apk"
            ls -lh "$apk"
            if [ -s "$apk" ]; then
              echo "Debug APK size is valid: $(du -h "$apk")"
            else
              echo "ERROR: Debug APK is empty!"
            fi
          fi
        done
        
        echo "=== RELEASE APK ==="
        for apk in ./release-apk/*.apk; do
          if [ -f "$apk" ]; then
            echo "Found release APK: $apk"
            ls -lh "$apk"
            if [ -s "$apk" ]; then
              echo "Release APK size is valid: $(du -h "$apk")"
            else
              echo "ERROR: Release APK is empty!"
            fi
          fi
        done
        
    - name: Prepare APKs for release
      run: |
        mkdir -p ./final-apks/
        
        # Copy debug APK (primary for installation)
        if [ -f ./debug-apk/*.apk ]; then
          cp ./debug-apk/*.apk ./final-apks/Smart-Drawer-debug.apk
          echo "Debug APK prepared for release"
        fi
        
        # Copy release APK if available
        if [ -f ./release-apk/*.apk ]; then
          cp ./release-apk/*.apk ./final-apks/Smart-Drawer-release.apk
          echo "Release APK prepared for release"
        fi
        
        echo "Final APKs:"
        ls -lh ./final-apks/
        
    - name: Get version name
      id: version
      run: |
        if [ -f app/build.gradle ]; then
          VERSION=$(grep versionName app/build.gradle | awk '{print $2}' | tr -d '"' | tr -d "'")
          if [ -z "$VERSION" ]; then
            VERSION="1.0.0"
            echo "No version found, using default: $VERSION"
          else
            echo "Version found: $VERSION"
          fi
        else
          VERSION="1.0.0"
          echo "build.gradle not found, using default: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: v${{ steps.version.outputs.version }}
        name: Smart Drawer v${{ steps.version.outputs.version }}
        body: |
          ## Smart Drawer Release v${{ steps.version.outputs.version }}
          
          ### 📱 Installation Instructions
          
          **For easy installation, download the DEBUG APK:**
          - `Smart-Drawer-debug.apk` - **RECOMMENDED for testing**
          - Easier to install, more compatible with different devices
          
          **Alternative:**
          - `Smart-Drawer-release.apk` - Optimized version (if available)
          
          ### 🛠️ Installation Steps
          1. **Enable Unknown Sources**: Settings → Security → Unknown Sources
          2. **Download APK**: Click on the APK file below
          3. **Install**: Open the downloaded APK file
          4. **Grant Permissions**: Allow overlay and other required permissions
          
          ### 🚀 Features
          - 🎯 Floating draggable widget overlay
          - 📱 Full-screen app drawer with search
          - 🔍 Real-time app filtering
          - ⚙️ Settings management
          - 🌙 Dark mode support
          - 🏁 Auto-start on boot
          
          ### 📋 Technical Info
          - **Target SDK:** 34 
          - **Min SDK:** 23 (Android 6.0+)
          - **APK Size:** < 3MB
          - **Build Date:** ${{ github.event.head_commit.timestamp }}
          - **Commit:** ${{ github.sha }}
          
          ### 🔧 Troubleshooting
          If installation fails:
          1. Try the debug APK first
          2. Clear any previous installations
          3. Restart your device
          4. Check if you have enough storage space
        artifacts: ./final-apks/*
        draft: false
        prerelease: false
        allowUpdates: true
        replacesArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}